openapi: "3.0.0"
info:
  version: "1.0.0"
  title: "dbo-test"
  description: dbo-test backend
servers:
  - url: http://localhost:5000/api
paths:
  /auth:
    get:
      tags:
        - Authentication
      summary: Get Login Data
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    items:
                      oneOf:
                        - properties:
                            id:
                              type: integer
                              format: int32
                              example: 1
                            name:
                              type: string
                              example: Pandu Bhaskara
                            mobile_number:
                              type: string
                              example: +682212345566
                            email:
                              type: string
                              example: pandu@mail.com
                            password:
                              type: string
                              example: abcd1234
                            issued_at:
                              type: string
                              example: 023-08-02T13:06:48.783558+07:00
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/register:
    post:
      tags:
        - Authentication
      summary: "dbo-test"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully register
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        412:
          description: Precondition Failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid email format
  /users?page={page}&limit={limit}:
    parameters:
      - name: page
        description: Define page
        in: path
        required: true
        schema:
          type: string
      - name: limit
        description: Define limit
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - User
      summary: Get with paginate
      responses:
        200:
          description: test
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    items:
                      $ref: "#/components/schemas/User"
                  page:
                    type: integer
                  total_page:
                    type: integer
  /users/{user_id}:
    parameters:
      - name: user_id
        description: Define user ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - User
      summary: Get Detail
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Not found
  /users/create:
    post:
      tags:
        - User
      summary: Insert
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                mobile_number:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully create user
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        412:
          description: Precondition Failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid email format
  /users/edit/{user_id}:
    parameters:
      - name: user_id
        description: Define user ID
        in: path
        required: true
        schema:
          type: string
    put:
      tags:
        - User
      summary: Update
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                mobile_number:
                  type: string
                email:
                  type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully edit user
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        412:
          description: Precondition Failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid email format
  /users/delete/{user_id}:
    parameters:
      - name: user_id
        description: Define user ID
        in: path
        required: true
        schema:
          type: string
    delete:
      tags:
        - User
      summary: Delete
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully delete user
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /orders?page={page}&limit={limit}:
    parameters:
      - name: page
        description: Define page
        in: path
        required: true
        schema:
          type: string
      - name: limit
        description: Define limit
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Order
      summary: Get with paginate
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    items:
                      $ref: "#/components/schemas/Order"
                  page:
                    type: integer
                  total_page:
                    type: integer
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /orders/{order_id}:
    parameters:
      - name: order_id
        description: Define order ID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Order
      summary: Get Detail
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    properties:
                      id:
                        type: integer
                      quantity:
                        type: integer
                      name:
                        type: string
                      price:
                        type: integer
                      created_at:
                        type: string
                      updated_at:
                        type: string

        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: Not found
  /orders/create:
    post:
      tags:
        - Order
      summary: Insert
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully create order
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /orders/edit/{order_id}:
    put:
      tags:
        - Order
      summary: Update
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully edit user
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        412:
          description: Precondition Failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /orders/delete/{order_id}:
    delete:
      tags:
        - Order
      summary: Delete
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully delete user
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /products:
    get:
      tags:
        - Order
      summary: Get Product
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    items:
                      $ref: "#/components/schemas/Product"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: integer
        mobile_number:
          type: string
        email:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
    Order:
      type: object
      properties:
        id:
          type: integer
        quantity:
          type: integer
        name:
          type: string
        price:
          type: integer
        created_at:
          type: string
        updated_at:
          type: string
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        price:
          type: integer
        supplier_id:
          type: integer
        created_at:
          type: string
        updated_at:
          type: string
        deleted_at:
          type: string
    Error:
      type: object
      required:
        - message
      properties:
        message:
          description: A human readable error message
          type: string
  securitySchemes:
    ApiKey:
      type: apiKey
      in: header
      name: X-Api-Key
security:
  - ApiKey: []
